/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "docs";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/board_edit_manager.js":
/*!***********************************!*\
  !*** ./src/board_edit_manager.js ***!
  \***********************************/
/*! exports provided: BoardEditManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoardEditManager\", function() { return BoardEditManager; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\n\n\n\nfunction BoardEditManager(board, canvas) {\n  this.board = board;\n  this.canvas = canvas;\n  this.mouseIsDown = false;\n  this.squaresToggled = new Set();\n  this.dragMode = DragMode.NONE;\n}\n\n// We want the drag action to either only add squares or only remove squares, not mix the two\nconst DragMode = Object.freeze({\n  ADDING: \"adding\",\n  REMOVING: \"removing\",\n  NONE: \"none\",\n});\n\nfunction getRowAndColOfMouseCoords(event) {\n  const rect = mainCanvas.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n  const r = Math.floor(y / _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]);\n  const c = Math.floor(x / _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]);\n  return [r, c];\n}\n\n// A predictable way to get a string key from a pair of integers\nfunction getStringKey(numA, numB) {\n  return numA + \",\" + numB;\n}\n\nBoardEditManager.prototype.toggleCell = function (r, c) {\n  // Add this to the toggled set so it doesn't flicker on and off during drag\n  this.squaresToggled.add(getStringKey(r, c));\n\n  this.board[r][c] =\n    this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY\n      ? _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].COLOR1\n      : _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n  this.canvas.drawBoard();\n  this.canvas.drawCurrentPiece();\n};\n\nBoardEditManager.prototype.onMouseDown = function (event) {\n  let r, c;\n  [r, c] = getRowAndColOfMouseCoords(event);\n  this.mouseIsDown = true;\n  this.dragMode =\n    this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY ? DragMode.ADDING : DragMode.REMOVING;\n  this.toggleCell(r, c);\n};\n\nBoardEditManager.prototype.onMouseDrag = function (event) {\n  if (!this.mouseIsDown) {\n    return;\n  }\n  let r, c;\n  [r, c] = getRowAndColOfMouseCoords(event);\n  const cellShouldBeFlipped =\n    this.dragMode == DragMode.ADDING\n      ? this.board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY\n      : this.board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n  if (cellShouldBeFlipped && !this.squaresToggled.has(getStringKey(r, c))) {\n    this.toggleCell(r, c);\n  }\n};\n\nBoardEditManager.prototype.onMouseUp = function (event) {\n  this.mouseIsDown = false;\n  this.squaresToggled = new Set();\n};\n\n\n//# sourceURL=webpack:///./src/board_edit_manager.js?");

/***/ }),

/***/ "./src/board_generator.js":
/*!********************************!*\
  !*** ./src/board_generator.js ***!
  \********************************/
/*! exports provided: BoardGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoardGenerator\", function() { return BoardGenerator; });\nconst { NUM_COLUMN, NUM_ROW, SquareState } = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n\nfunction BoardGenerator(board, canvas) {\n  this.board = board;\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Clears out the game board, in-place.\n */\nBoardGenerator.prototype.loadEmptyBoard = function () {\n  for (let r = 0; r < NUM_ROW; r++) {\n    for (let c = 0; c < NUM_COLUMN; c++) {\n      this.board[r][c] = SquareState.EMPTY;\n    }\n  }\n};\n\n/**\n * Loads a standard-ish sloping board, in-place.\n */\nBoardGenerator.prototype.loadStandardBoard = function () {\n  this.loadEmptyBoard();\n\n  let currentHeight = getRandomInt(6, 10);\n  for (let col = 0; col < NUM_COLUMN - 1; col++) {\n    const heightThisCol = Math.min(16, Math.max(0, currentHeight));\n    // There's some subtraction here because the origin is at the top\n    // but 0 height is at the bottom\n    for (let row = NUM_ROW - heightThisCol - 1; row < NUM_ROW; row++) {\n      const colorIndex = row % 3;\n      const rowColor = [\n        SquareState.COLOR1,\n        SquareState.COLOR2,\n        SquareState.COLOR3,\n      ][colorIndex];\n\n      this.board[row][col] = rowColor;\n    }\n\n    // Apply a random factor that makes it favor sloping right\n    currentHeight += getRandomInt(-2, 1);\n  }\n};\n\nconst HOLE_PROBABILITIES = {\n  NONE: 0.5,\n  ONE: 0.4,\n  TWO: 0.1,\n};\n\n/**\n * Loads a board with holes in it, in-place.\n */\nBoardGenerator.prototype.loadDigBoard = function () {\n  this.loadStandardBoard();\n\n  for (let row = 0; row < NUM_ROW; row++) {\n    let numHoles;\n    const rand0To1 = Math.random();\n    if (rand0To1 < HOLE_PROBABILITIES.NONE) {\n      numHoles = 0;\n    } else if (rand0To1 < HOLE_PROBABILITIES.NONE + HOLE_PROBABILITIES.ONE) {\n      numHoles = 1;\n    } else {\n      numHoles = 2;\n    }\n\n    for (let i = 0; i < numHoles; i++) {\n      this.board[row][getRandomInt(0, NUM_COLUMN)] = SquareState.EMPTY;\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./src/board_generator.js?");

/***/ }),

/***/ "./src/board_loader.js":
/*!*****************************!*\
  !*** ./src/board_loader.js ***!
  \*****************************/
/*! exports provided: BoardLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoardLoader\", function() { return BoardLoader; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\nconst pasteAreaElement = document.getElementById(\"paste-area\");\nconst pastedImageElement = document.getElementById(\"pasted-image\");\n\n\n\n\nlet m_loadedStateFromImage = false;\nlet m_loadedBoard = [];\n\nfunction BoardLoader(board, canvas) {\n  this.board = board;\n  this.canvas = canvas;\n\n  setUpPasteability(this);\n}\n\nBoardLoader.prototype.resetBoard = function () {\n  // Reload the board from the image, or reset the board\n  // (have to iterate manually (not use this.board = ) to preserve the board reference that's passed around to all the files\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n      this.board[r][c] = m_loadedStateFromImage\n        ? m_loadedBoard[r][c]\n        : _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n    }\n  }\n};\n\n// Get whether the board has been loaded from an image\nBoardLoader.prototype.didLoadBoardStateFromImage = function () {\n  return m_loadedStateFromImage;\n};\n\nBoardLoader.prototype.getBoardStateFromImage = function (img) {\n  var dummy_canvas = document.getElementById(\"dummy-canvas\");\n  var context = dummy_canvas.getContext(\"2d\");\n  dummy_canvas.width = img.width;\n  dummy_canvas.height = img.height;\n  context.drawImage(img, 0, 0);\n  this.resetBoard();\n\n  const cropOffset = -0.3;\n  const SQ = (img.height / 20 + img.width / 10) / 2 + cropOffset;\n  const rgbEmptyThreshold = 60; // If all three channels are <60/255, then the cell is \"empty\"\n\n  // Iterate over the image and read the square colors into the board\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n      const x = Math.round((c + 0.5) * SQ);\n      const y = Math.round((r + 0.5) * SQ);\n      const pixelData = context.getImageData(x, y, 1, 1).data;\n      if (\n        Math.max(pixelData[0], pixelData[1], pixelData[2]) > rgbEmptyThreshold\n      ) {\n        this.board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].color1; //\"rgba(\" + pixelData.join(\",\") + \")\";\n      } else {\n        this.board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n      }\n      context.fillStyle = \"GREEN\";\n      context.fillRect(x, y, 5, 5);\n    }\n  }\n\n  // Edit out the currently falling piece from the boardstate\n  clearFloatingPiece(this.board);\n  m_loadedBoard = JSON.parse(JSON.stringify(this.board)); // Save a copy of the loaded board\n  this.canvas.drawBoard();\n  m_loadedStateFromImage = true;\n};\n\n// Remove the piece from midair when loading a board from a screenshot\nfunction clearFloatingPiece(board) {\n  // Start from the bottom, look for an empty row, and then clear all rows above that\n  let startedClearing = false;\n  for (let r = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] - 1; r >= 0; r--) {\n    if (startedClearing) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n        board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n      }\n    } else {\n      let rowEmpty = true;\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n        if (board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY) {\n          rowEmpty = false;\n          break;\n        }\n      }\n      if (rowEmpty) {\n        startedClearing = true;\n      }\n    }\n  }\n}\n\nfunction setUpPasteability(boardLoaderThis) {\n  // When an image is pasted, get the board state from it\n  pasteAreaElement.onpaste = function (event) {\n    // use event.originalEvent.clipboard for newer chrome versions\n    var items = (event.clipboardData || event.originalEvent.clipboardData)\n      .items;\n    // find pasted image among pasted items\n    var blob = null;\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].type.indexOf(\"image\") === 0) {\n        blob = items[i].getAsFile();\n      }\n    }\n    // load image if there is a pasted image\n    if (blob !== null) {\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        pastedImageElement.onload = function () {\n          boardLoaderThis.getBoardStateFromImage(pastedImageElement);\n        };\n        pastedImageElement.src = event.target.result;\n      };\n      reader.readAsDataURL(blob);\n    }\n  };\n}\n\n\n//# sourceURL=webpack:///./src/board_loader.js?");

/***/ }),

/***/ "./src/canvas.js":
/*!***********************!*\
  !*** ./src/canvas.js ***!
  \***********************/
/*! exports provided: Canvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Canvas\", function() { return Canvas; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./src/index.js\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst context = mainCanvas.getContext(\"2d\");\n\n\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\n\n// Resize the canvas based on the square size\nmainCanvas.setAttribute(\"height\", _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]);\nmainCanvas.setAttribute(\"width\", _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] * (_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] + 7)); // +6 for next boxk\n\nfunction Canvas(board) {\n  this.board = board;\n}\n\n/** Runs an animation to clear the lines passed in in an array.\n * Doesn't affect the actual board, those updates come at the end of the animation. */\nCanvas.prototype.drawLineClears = function (rowsArray, frameNum) {\n  if (frameNum >= 15) {\n    // animation already done\n    return;\n  }\n  const rightColToClear = 5 + Math.floor(frameNum / 3);\n  const leftColToClear = 9 - rightColToClear;\n  for (const rowNum of rowsArray) {\n    context.fillStyle = \"black\";\n    context.fillRect(\n      leftColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n    );\n    context.fillRect(\n      rightColToClear * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      rowNum * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n    );\n  }\n};\n\n// draw a square\nCanvas.prototype.drawSquare = function (x, y, color, border = false) {\n  if (color == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"]) {\n    context.fillStyle = \"black\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n    );\n    return;\n  }\n\n  // For I, T, and O\n  context.fillStyle = color;\n  context.fillRect(\n    x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    7 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n    7 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n  );\n\n  if (border && color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"]) {\n    context.fillStyle = \"white\";\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n    );\n  }\n  // Draw 'shiny' part\n  if (color !== _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"]) {\n    context.fillStyle = \"white\";\n    context.fillRect(x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"], y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"], _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"], _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]);\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n    );\n    context.fillRect(\n      x * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      y * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n      _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n    );\n  }\n};\n\n/**\n * Draws the next box. If nextPiece is nonnull, draws the piece in it.\n * @param {Piece object} nextPiece\n */\nCanvas.prototype.drawNextBox = function (nextPiece) {\n  // All in units of SQUARE_SIZE\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] + 1;\n  const startY = 8;\n  const width = 5;\n  const height = 4.5;\n\n  // background\n  context.fillStyle = \"BLACK\";\n  context.fillRect(\n    startX * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    startY * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    width * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"],\n    height * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"]\n  );\n\n  if (nextPiece != null) {\n    const pieceStartX =\n      nextPiece.id === \"I\" || nextPiece.id === \"O\" ? startX + 0.5 : startX;\n    const pieceStartY = nextPiece.id === \"I\" ? startY - 0.25 : startY + 0.25;\n    const color = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][nextPiece.colorId][Object(_index_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])() % 10];\n\n    // draw the piece\n\n    for (let r = 0; r < nextPiece.activeTetromino.length; r++) {\n      for (let c = 0; c < nextPiece.activeTetromino[r].length; c++) {\n        // Draw only occupied squares\n        if (nextPiece.activeTetromino[r][c]) {\n          this.drawSquare(\n            pieceStartX + c,\n            pieceStartY + r,\n            color,\n            nextPiece.colorId === 1\n          );\n        }\n      }\n    }\n  }\n};\n\nCanvas.prototype.drawScoreDisplay = function (score) {\n  const width = 5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_WIDTH\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startY = 0.5 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n\n  const formattedScore = (\"0\".repeat(6) + score).slice(-6);\n  this.drawMultiLineText(\n    [\"SCORE\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\"\n  );\n};\n\nCanvas.prototype.drawLinesDisplay = function (numLines) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NEXT_BOX_WIDTH\"];\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_WIDTH\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startY = 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n\n  const formattedScore = (\"0\".repeat(3) + numLines).slice(-3);\n  this.drawMultiLineText(\n    [\"LINES\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\"\n  );\n};\n\nCanvas.prototype.drawLevelDisplay = function (level) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NEXT_BOX_WIDTH\"];\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_WIDTH\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startY = 14 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n\n  const formattedScore = (\"0\".repeat(2) + level).slice(-2);\n  this.drawMultiLineText(\n    [\"LEVEL\", formattedScore],\n    startX,\n    startY,\n    width,\n    \"center\"\n  );\n};\n\nCanvas.prototype.drawPieceStatusDisplay = function (linesOfText) {\n  const width = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NEXT_BOX_WIDTH\"];\n  const startX = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_WIDTH\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const startY = 6 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n\n  this.drawMultiLineText(linesOfText, startX, startY, width, \"center\");\n};\n\nCanvas.prototype.drawMultiLineText = function (\n  linesOfText,\n  startX,\n  startY,\n  width,\n  align\n) {\n  const lineHeight = 20;\n\n  // Clear previous text\n  context.clearRect(startX, startY, width, linesOfText.length * lineHeight);\n\n  // Write \"x of x\" text\n  context.textAlign = \"center\";\n  context.font = \"18px 'Press Start 2P'\";\n  context.fillStyle = \"BLACK\";\n\n  const alignOffsetFactor = align == \"center\" ? width / 2 : 0;\n\n  let lineIndex = 0;\n  for (let line of linesOfText) {\n    context.fillText(\n      line.toUpperCase(),\n      startX + alignOffsetFactor,\n      startY + (lineIndex + 1) * lineHeight\n    );\n    lineIndex++;\n  }\n};\n\nCanvas.prototype.drawPiece = function (piece) {\n  if (piece == undefined) {\n    return;\n  }\n  const level = Object(_index_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])();\n  const border = piece.id === \"T\" || piece.id === \"O\" || piece.id === \"I\";\n  for (let r = 0; r < piece.activeTetromino.length; r++) {\n    for (let c = 0; c < piece.activeTetromino[r].length; c++) {\n      // Draw only occupied squares\n      if (piece.activeTetromino[r][c]) {\n        if (piece.colorId !== 0) {\n          this.drawSquare(\n            piece.x + c,\n            piece.y + r,\n            _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][piece.colorId][level % 10],\n            border\n          );\n        } else {\n          this.drawSquare(piece.x + c, piece.y + r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"], border);\n        }\n      }\n    }\n  }\n};\n\nCanvas.prototype.unDrawPiece = function (piece) {\n  if (piece == undefined) {\n    return;\n  }\n  for (let r = 0; r < piece.activeTetromino.length; r++) {\n    for (let c = 0; c < piece.activeTetromino[r].length; c++) {\n      // Erase occupied squares\n      if (piece.activeTetromino[r][c]) {\n        this.drawSquare(piece.x + c, piece.y + r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"], false);\n      }\n    }\n  }\n};\n\nCanvas.prototype.drawCurrentPiece = function () {\n  this.drawPiece(Object(_index_js__WEBPACK_IMPORTED_MODULE_1__[\"GetCurrentPiece\"])());\n};\n\nCanvas.prototype.unDrawCurrentPiece = function () {\n  this.unDrawPiece(Object(_index_js__WEBPACK_IMPORTED_MODULE_1__[\"GetCurrentPiece\"])());\n};\n\n// Draw the pieces locked into the board (NB: does not render the current piece)\nCanvas.prototype.drawBoard = function () {\n  const level = Object(_index_js__WEBPACK_IMPORTED_MODULE_1__[\"GetLevel\"])();\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n      let square = this.board[r][c];\n      if (square !== 0) {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"COLOR_PALETTE\"][square][level % 10], square === 1);\n      } else {\n        this.drawSquare(c, r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"VACANT\"], square === 1);\n      }\n    }\n  }\n\n  if (GameSettings.ShouldShowDiggingHints()) {\n    this.drawDiggingHints();\n  }\n};\n\nfunction filledIfExists(row, col, board) {\n  if (col < 0 || col >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] || row < 0 || row >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]) {\n    return true;\n  }\n  return board[row][col] != _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY;\n}\n\nfunction getTopmostHole(board) {\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]; r++) {\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; c++) {\n      if (\n        board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY &&\n        filledIfExists(r - 1, c, board) &&\n        filledIfExists(r + 1, c, board) &&\n        filledIfExists(r, c - 1, board) &&\n        filledIfExists(r, c + 1, board)\n      ) {\n        return [r, c];\n      }\n    }\n  }\n  return [];\n}\n\nfunction getRowsCoveringWell(board) {\n  let r = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] - 1;\n  let rowsCoveringWell = [];\n  while (!filledIfExists(r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] - 1, board)) {\n    r--;\n  }\n  while (filledIfExists(r, _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] - 1, board)) {\n    rowsCoveringWell.push(r);\n    r--;\n  }\n  return rowsCoveringWell;\n}\n\nCanvas.prototype.drawDiggingHints = function () {\n  const topMostHole = getTopmostHole(this.board);\n  const rowsCoveringWell = getRowsCoveringWell(this.board);\n\n  // If there are no holes, we don't need any hints\n  if (topMostHole === [] && rowsCoveringWell === []) {\n    return;\n  }\n\n  // Find the rows that need to be cleared\n  const row = topMostHole[0];\n  const col = topMostHole[1];\n  let rowsToClear = [];\n\n  let currentRow = row - 1;\n  while (currentRow >= 0 && filledIfExists(currentRow, col, this.board)) {\n    rowsToClear.push(currentRow);\n    currentRow -= 1;\n  }\n\n  console.log(rowsToClear);\n\n  // Draw a yellow circle in the topmost hole\n  const centerY = (row + 0.45) * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const centerX = (col + 0.45) * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"];\n  const radius = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] / 4;\n  context.fillStyle = \"yellow\";\n  context.beginPath();\n  context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n  context.fill();\n\n  // Fill in the empty spaces with red in rows that need to be cleared\n  for (let loopRow of rowsToClear) {\n    for (let loopCol = 0; loopCol < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]; loopCol++) {\n      if (this.board[loopRow][loopCol] == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SquareState\"].EMPTY) {\n        context.fillStyle = \"#AA3A3A\";\n        console.log(\"Filling\", loopRow, loopCol);\n        context.fillRect(\n          loopCol * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n          loopRow * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] + _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n          _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] - 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"],\n          _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"SQUARE_SIZE\"] - 3 * _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"PIXEL_SIZE\"]\n        );\n      }\n    }\n  }\n};\n\n\n//# sourceURL=webpack:///./src/canvas.js?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/*! exports provided: NUM_ROW, NUM_COLUMN, PIXEL_SIZE, SQUARE_SIZE, BOARD_HEIGHT, BOARD_WIDTH, DISPLAY_FULL_WIDTH, BOARD_TOP_MARGIN, NEXT_BOX_WIDTH, VACANT, RED_COLOR, BLUE_COLOR, WHITE_COLOR, SquareState, COLOR_1, COLOR_2, COLOR_3, COLOR_PALETTE, Direction, REWARDS, CalculatePushdownPoints, GetGravity, GameState, LINE_CLEAR_DELAY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NUM_ROW\", function() { return NUM_ROW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NUM_COLUMN\", function() { return NUM_COLUMN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PIXEL_SIZE\", function() { return PIXEL_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SQUARE_SIZE\", function() { return SQUARE_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BOARD_HEIGHT\", function() { return BOARD_HEIGHT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BOARD_WIDTH\", function() { return BOARD_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DISPLAY_FULL_WIDTH\", function() { return DISPLAY_FULL_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BOARD_TOP_MARGIN\", function() { return BOARD_TOP_MARGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NEXT_BOX_WIDTH\", function() { return NEXT_BOX_WIDTH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VACANT\", function() { return VACANT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RED_COLOR\", function() { return RED_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BLUE_COLOR\", function() { return BLUE_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WHITE_COLOR\", function() { return WHITE_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SquareState\", function() { return SquareState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_1\", function() { return COLOR_1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_2\", function() { return COLOR_2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_3\", function() { return COLOR_3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COLOR_PALETTE\", function() { return COLOR_PALETTE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Direction\", function() { return Direction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REWARDS\", function() { return REWARDS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CalculatePushdownPoints\", function() { return CalculatePushdownPoints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetGravity\", function() { return GetGravity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameState\", function() { return GameState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LINE_CLEAR_DELAY\", function() { return LINE_CLEAR_DELAY; });\nconst NUM_ROW = 20;\nconst NUM_COLUMN = 10;\nconst PIXEL_SIZE = 3; // i.e. the scaleup from 1 NES pixel\nconst SQUARE_SIZE = 8 * PIXEL_SIZE;\n\nconst BOARD_HEIGHT = SQUARE_SIZE * NUM_ROW;\nconst BOARD_WIDTH = SQUARE_SIZE * NUM_COLUMN;\nconst DISPLAY_FULL_WIDTH = SQUARE_SIZE * (NUM_COLUMN + 6); // Extra columns for next box\nconst BOARD_TOP_MARGIN = 2 * SQUARE_SIZE;\nconst NEXT_BOX_WIDTH = 5 * SQUARE_SIZE;\n\nconst VACANT = \"black\"; // color of an empty square\nconst RED_COLOR = \"red\";\nconst BLUE_COLOR = \"#2105f2\";\nconst WHITE_COLOR = \"white\";\n\n// 0 is empty space, 1 is T piece color, 2 is L piece color, 3 is J piece color\nconst SquareState = {\n  EMPTY: 0,\n  COLOR1: 1,\n  COLOR2: 2,\n  COLOR3: 3,\n};\n\n// color 1 is COLOR_3 with white in the center, which is used for I, T, and O\nconst COLOR_1 = {\n  0: \"rgb(0,88,248)\",\n  1: \"rgb(0,168,0)\",\n  2: \"rgb(216,0,204)\",\n  3: \"rgb(0,88,248)\",\n  4: \"rgb(228,0,88\",\n  5: \"rgb(88,248,152)\",\n  6: \"rgb(248,56,0)\",\n  7: \"rgb(104,68,252)\",\n  8: \"rgb(0,88,248)\",\n  9: \"rgb(248,56,0)\",\n};\n// color 2 is the main color of L and Z\nconst COLOR_2 = {\n  0: \"rgb(60,188,252)\",\n  1: \"rgb(148,248,24)\",\n  2: \"rgb(248,120,248)\",\n  3: \"rgb(88,216,84)\",\n  4: \"rgb(88,248,152)\",\n  5: \"rgb(104,136,252)\",\n  6: \"rgb(124,124,124)\",\n  7: \"rgb(168,0,32)\",\n  8: \"rgb(248,56,0)\",\n  9: \"rgb(252,160,68)\",\n};\n// COLOR_3 is the main color of J and S\n// It is the same as COLOR_1, but fills the whole square\nconst COLOR_3 = Object.assign(COLOR_1);\n\nconst COLOR_PALETTE = {\n  1: COLOR_1,\n  2: COLOR_2,\n  3: COLOR_3,\n};\n\nconst Direction = Object.freeze({\n  LEFT: 1,\n  RIGHT: 2,\n  DOWN: 3,\n  UP: 4,\n});\n\n// How many points for X lines at a time (before scaling by level)\nconst REWARDS = {\n  1: 40,\n  2: 100,\n  3: 300,\n  4: 1200,\n};\n// How many frames it takes to drop one square\nconst GRAVITY = {\n  0: 48,\n  1: 43,\n  2: 38,\n  3: 33,\n  4: 28,\n  5: 23,\n  6: 18,\n  7: 13,\n  8: 8,\n  9: 6,\n  10: 5,\n  11: 5,\n  12: 5,\n  13: 4,\n  14: 4,\n  15: 4,\n  16: 3,\n  17: 3,\n  18: 3,\n  19: 2,\n  29: 1,\n};\n\nfunction CalculatePushdownPoints(cellsSoftDropped) {\n  if (cellsSoftDropped >= 16) {\n    return cellsSoftDropped - 6; // Simulate the hex conversion bug in NES\n  }\n  return cellsSoftDropped;\n}\n\nfunction GetGravity(levelNum) {\n  if (levelNum <= 18) {\n    return GRAVITY[levelNum];\n  } else if (levelNum < 29) {\n    return 2;\n  } else {\n    return 1;\n  }\n}\n\nconst GameState = {\n  FIRST_PIECE: \"first piece\",\n  RUNNING: \"running\",\n  PAUSED: \"paused\",\n  GAME_OVER: \"game over\",\n  START_SCREEN: \"start screen\",\n  ARE: \"are\",\n  LINE_CLEAR: \"line clear\",\n};\n\nconst LINE_CLEAR_DELAY = 18;\n\n\n//# sourceURL=webpack:///./src/constants.js?");

/***/ }),

/***/ "./src/game_settings_manager.js":
/*!**************************************!*\
  !*** ./src/game_settings_manager.js ***!
  \**************************************/
/*! exports provided: IsDASAlwaysCharged, ShouldTransitionEvery10Lines, ShouldTransitionEveryLine, ShouldShowDiggingHints, GetDASUnchargedFloor, GetDASChargedFloor, GetDASTriggerThreshold */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IsDASAlwaysCharged\", function() { return IsDASAlwaysCharged; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShouldTransitionEvery10Lines\", function() { return ShouldTransitionEvery10Lines; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShouldTransitionEveryLine\", function() { return ShouldTransitionEveryLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShouldShowDiggingHints\", function() { return ShouldShowDiggingHints; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetDASUnchargedFloor\", function() { return GetDASUnchargedFloor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetDASChargedFloor\", function() { return GetDASChargedFloor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetDASTriggerThreshold\", function() { return GetDASTriggerThreshold; });\nfunction IsDASAlwaysCharged() {\n  return false;\n}\n\nfunction UseKillscreenDAS12Hz() {\n  return false;\n}\n\nfunction ShouldTransitionEvery10Lines() {\n  return false;\n}\n\nfunction ShouldTransitionEveryLine() {\n  return false;\n}\n\nfunction ShouldShowDiggingHints() {\n  return true;\n}\n\nfunction GetDASUnchargedFloor() {\n  if (IsDASAlwaysCharged()) {\n    return 10;\n  }\n  return 0;\n}\n\nfunction GetDASChargedFloor() {\n  return 10;\n}\n\nfunction GetDASTriggerThreshold() {\n  if (UseKillscreenDAS12Hz()) {\n    return 22;\n  }\n  return 16;\n}\n\n\n//# sourceURL=webpack:///./src/game_settings_manager.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: GetCurrentPiece, GetLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetCurrentPiece\", function() { return GetCurrentPiece; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GetLevel\", function() { return GetLevel; });\n/* harmony import */ var _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./piece_selector.js */ \"./src/piece_selector.js\");\n/* harmony import */ var _board_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./board_loader.js */ \"./src/board_loader.js\");\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas.js */ \"./src/canvas.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var _piece_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./piece.js */ \"./src/piece.js\");\n/* harmony import */ var _input_manager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./input_manager.js */ \"./src/input_manager.js\");\n/* harmony import */ var _board_edit_manager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./board_edit_manager.js */ \"./src/board_edit_manager.js\");\n/* harmony import */ var _board_generator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./board_generator.js */ \"./src/board_generator.js\");\n/* harmony import */ var _ui_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui_manager */ \"./src/ui_manager.js\");\n\n\n\n\n\n\n\n\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\n\nconst scoreTextElement = document.getElementById(\"score-display\");\nconst linesTextElement = document.getElementById(\"lines-display\");\nconst levelTextElement = document.getElementById(\"level-display\");\nconst headerTextElement = document.getElementById(\"header-text\");\nconst statsTextElement = document.getElementById(\"stats\");\nconst gameOptionsForm = document.getElementById(\"game-options-form\");\nconst startGameButton = document.getElementById(\"start-game\");\nconst restartGameButton = document.getElementById(\"restart-game\");\nconst levelSelectElement = document.getElementById(\"level-select\");\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst rightPanel = document.getElementById(\"right-panel\");\n\n// Create the initial empty board\nlet m_board = [];\nfor (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n  m_board[r] = [];\n  for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n    m_board[r][c] = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"SquareState\"].EMPTY;\n  }\n}\n\nlet m_inputManager;\nlet m_canvas = new _canvas_js__WEBPACK_IMPORTED_MODULE_2__[\"Canvas\"](m_board);\nlet m_boardEditManager = new _board_edit_manager_js__WEBPACK_IMPORTED_MODULE_6__[\"BoardEditManager\"](m_board, m_canvas);\nlet m_boardGenerator = new _board_generator_js__WEBPACK_IMPORTED_MODULE_7__[\"BoardGenerator\"](m_board);\nlet m_pieceSelector = new _piece_selector_js__WEBPACK_IMPORTED_MODULE_0__[\"PieceSelector\"]();\nlet m_boardLoader = new _board_loader_js__WEBPACK_IMPORTED_MODULE_1__[\"BoardLoader\"](m_board, m_canvas);\nlet m_currentPiece;\nlet m_nextPiece;\n\nlet m_level;\nlet m_lines;\nlet m_nextTransitionLineCount;\nlet m_gameState;\nlet m_score;\nlet m_gravityFrameCount;\nlet m_ARE;\nlet m_lineClearFrames;\nlet m_firstPieceDelay;\nlet m_linesPendingClear;\nlet m_pendingPoints;\n\n// Exported methods that allow other classes to access the variables in this file\n\nconst GetCurrentPiece = () => {\n  return m_currentPiece;\n};\n\nconst GetLevel = () => {\n  return m_level;\n};\n\nfunction refreshHeaderText() {\n  let newText = \"\";\n  switch (m_gameState) {\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].START_SCREEN:\n      newText = \"Welcome to Tetris Trainer!\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING:\n      newText = \"\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].GAME_OVER:\n      newText = \"Game over!\";\n      break;\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED:\n      newText = \"Paused\";\n      break;\n  }\n  headerTextElement.innerText = newText;\n}\n\nfunction refreshStats() {\n  const calcParity = function (startCol, endCol) {\n    // Calculate parity, where the top left square is \"1\" and adjacent squares are \"-1\"\n    let parity = 0;\n    for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n      for (let c = startCol; c < endCol; c++) {\n        if (r >= 18) {\n        }\n        if (m_board[r][c] != _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"SquareState\"].EMPTY) {\n          // Add 1 or -1 to parity total based on the square's location\n          const cellConstant = (r + c) % 2 == 0 ? 1 : -1;\n          parity += cellConstant;\n        }\n      }\n    }\n    return Math.abs(parity);\n  };\n\n  const leftParity = calcParity(0, 5);\n  const middleParity = calcParity(3, 7);\n  const rightParity = calcParity(5, 10);\n\n  statsTextElement.innerText = `Parity: \\nL=${leftParity} \\nM=${middleParity} \\nR=${rightParity}`;\n}\n\nfunction getFullRows() {\n  let fullLines = [];\n  for (let r = 0; r < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_ROW\"]; r++) {\n    let isRowFull = true;\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n      if (m_board[r][c] == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"SquareState\"].EMPTY) {\n        isRowFull = false;\n        break;\n      }\n    }\n    if (isRowFull) {\n      fullLines.push(r);\n    }\n  }\n  return fullLines;\n}\n\nfunction getLinesToTransition(levelNum) {\n  // Method from NES\n  if (levelNum < 10) {\n    return (levelNum + 1) * 10;\n  } else if (levelNum <= 15) {\n    return 100;\n  } else {\n    return (levelNum - 5) * 10;\n  }\n}\n\nfunction removeFullRows() {\n  const numLinesCleared = m_linesPendingClear.length;\n  for (const r of m_linesPendingClear) {\n    // Move down all the rows above it\n    for (let y = r; y > 1; y--) {\n      for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n        m_board[y][c] = m_board[y - 1][c];\n      }\n    }\n    // Clear out the very top row (newly shifted into the screen)\n    for (let c = 0; c < _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"NUM_COLUMN\"]; c++) {\n      m_board[0][c] = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"SquareState\"].EMPTY;\n    }\n  }\n  m_linesPendingClear = [];\n\n  // Post-line clear processing\n  if (numLinesCleared > 0) {\n    // Update the lines\n    m_lines += numLinesCleared;\n\n    // Maybe level transition\n    if (\n      GameSettings.ShouldTransitionEveryLine() ||\n      m_lines >= m_nextTransitionLineCount\n    ) {\n      m_level += 1;\n\n      m_nextTransitionLineCount += 10;\n    }\n\n    // Update the score (must be after lines + transition)\n    m_pendingPoints += _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"REWARDS\"][numLinesCleared] * (m_level + 1);\n\n    // Update the board\n    m_canvas.drawBoard();\n    m_canvas.drawNextBox(m_nextPiece);\n  }\n}\n\nfunction isGameOver() {\n  // If the current piece collides with the existing board as it spawns in, you die\n  const currentTetromino = m_currentPiece.activeTetromino;\n  for (let r = 0; r < currentTetromino.length; r++) {\n    for (let c = 0; c < currentTetromino[r].length; c++) {\n      if (\n        currentTetromino[r][c] &&\n        m_board[m_currentPiece.y + r][m_currentPiece.x + c]\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction getNewPiece() {\n  m_currentPiece = m_nextPiece;\n\n  // Piece status is drawn first, since the read index increments when the next\n  // piece is selected\n  m_canvas.drawPieceStatusDisplay(m_pieceSelector.getStatusDisplay());\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__[\"Piece\"](\n    m_pieceSelector.chooseNextPiece(m_currentPiece.id),\n    m_board\n  );\n\n  // Draw the new piece in the next box\n  m_canvas.drawNextBox(m_nextPiece);\n}\n\nfunction resetLocalVariables() {\n  m_score = 0;\n  m_gravityFrameCount = 0;\n  m_ARE = 0;\n  m_lineClearFrames = 0;\n  m_linesPendingClear = [];\n  m_pendingPoints = 0;\n  m_lines = 0;\n  m_level = 0;\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].START_SCREEN;\n  m_inputManager.resetLocalVariables();\n}\n\nfunction startGame() {\n  // Reset game values\n  resetLocalVariables();\n  m_firstPieceDelay = 30; // Extra delay for first piece\n  m_pieceSelector.startReadingPieceSequence();\n  // m_boardLoader.resetBoard();\n  m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].FIRST_PIECE;\n\n  // Parse the level\n  const levelSelected = parseInt(levelSelectElement.value);\n  if (Number.isInteger(levelSelected) && levelSelected > 0) {\n    m_level = levelSelected;\n  } else {\n    m_level = 0;\n  }\n\n  // Determine the number of lines till transition\n  m_nextTransitionLineCount = GameSettings.ShouldTransitionEvery10Lines()\n    ? 10\n    : getLinesToTransition(m_level);\n\n  // Get the first piece and put it in the next piece slot. Will be bumped to current in getNewPiece()\n  m_nextPiece = new _piece_js__WEBPACK_IMPORTED_MODULE_4__[\"Piece\"](m_pieceSelector.chooseNextPiece(\"\"), m_board);\n  getNewPiece();\n\n  // Refresh UI\n  m_canvas.drawBoard();\n  m_canvas.drawCurrentPiece();\n  refreshHeaderText();\n  refreshScoreHUD();\n}\n\n/** Progress the game state, and perform any other updates that occur on\n * particular game state transitions\n * */\nfunction updateGameState() {\n  // FIRST PIECE -> RUNNING\n  if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].FIRST_PIECE && m_firstPieceDelay == 0) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING;\n  }\n  // LINE CLEAR -> ARE\n  else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].LINE_CLEAR && m_lineClearFrames == 0) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].ARE;\n  }\n  // ARE -> RUNNING\n  else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].ARE && m_ARE == 0) {\n    // Add pending score to score total and refresh score UI\n    m_score += m_pendingPoints;\n    m_pendingPoints = 0;\n    refreshScoreHUD();\n\n    // Draw the next piece, since it's the end of ARE (and that's how NES does it)\n    m_canvas.drawCurrentPiece();\n    // Checked here because the game over condition depends on the newly spawned piece\n    if (isGameOver()) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].GAME_OVER;\n      refreshHeaderText();\n    } else {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING;\n    }\n  } else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING) {\n    // RUNNING -> LINE CLEAR\n    if (m_lineClearFrames > 0) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].LINE_CLEAR;\n    }\n    // RUNNING -> ARE\n    else if (m_ARE > 0) {\n      m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].ARE;\n    }\n  }\n  // Otherwise, unchanged.\n}\n\n// 60 FPS game loop\nfunction gameLoop() {\n  switch (m_gameState) {\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].FIRST_PIECE:\n      // Waiting for first piece\n      m_firstPieceDelay -= 1;\n      break;\n\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].LINE_CLEAR:\n      // Still animating line clear\n      m_lineClearFrames -= 1;\n      // Do subtraction so animation frames count up\n      m_canvas.drawLineClears(\n        m_linesPendingClear,\n        _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"LINE_CLEAR_DELAY\"] - m_lineClearFrames\n      );\n      if (m_lineClearFrames == 0) {\n        // Clear the lines for real and shift stuff down\n        removeFullRows();\n      }\n      break;\n\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].ARE:\n      // Waiting for next piece\n      m_ARE -= 1;\n      break;\n\n    case _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING:\n      // Handle inputs\n      m_inputManager.handleInputsThisFrame();\n\n      // Handle gravity\n      if (m_inputManager.getIsSoftDropping()) {\n        // Reset gravity for if they stop soft dropping\n        m_gravityFrameCount = 0;\n      } else {\n        // Increment gravity and shift down if appropriate\n        m_gravityFrameCount += 1;\n\n        // Move the piece down when appropriate\n        if (m_gravityFrameCount >= Object(_constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GetGravity\"])(m_level)) {\n          moveCurrentPieceDown();\n          m_gravityFrameCount = 0;\n        }\n      }\n\n      break;\n  }\n\n  updateGameState();\n\n  window.setTimeout(gameLoop, 16.67);\n\n  // Slow motion testing\n  // window.setTimeout(gameLoop, 100);\n}\n\nfunction refreshScoreHUD() {\n  console.log(\"refreshing score display\");\n  m_canvas.drawLevelDisplay(m_level);\n  m_canvas.drawScoreDisplay(m_score);\n  m_canvas.drawLinesDisplay(m_lines);\n}\n\n/** Delegate functions to controls code */\n\nfunction movePieceLeft() {\n  m_canvas.unDrawCurrentPiece();\n  const didMove = m_currentPiece.moveLeft();\n  m_canvas.drawCurrentPiece();\n  return didMove;\n}\n\n/** @returns whether the piece moved */\nfunction movePieceRight() {\n  m_canvas.unDrawCurrentPiece();\n  const didMove = m_currentPiece.moveRight();\n  m_canvas.drawCurrentPiece();\n  return didMove;\n}\n\n/** @returns whether the piece moved */\nfunction moveCurrentPieceDown() {\n  if (m_currentPiece.shouldLock()) {\n    // Lock in piece and re-render the board\n    const lockHeight = m_currentPiece.getHeightFromBottom();\n    m_currentPiece.lock();\n    m_inputManager.onPieceLock();\n    m_canvas.drawBoard();\n\n    // Refresh board-based\n    refreshStats();\n\n    // Get a new piece but --don't render it-- till after ARE\n    getNewPiece();\n\n    // Clear lines\n    m_linesPendingClear = getFullRows();\n    if (m_linesPendingClear.length > 0) {\n      m_lineClearFrames = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"LINE_CLEAR_DELAY\"]; // Clear delay counts down from max val\n    }\n\n    // Add pushdown points\n    m_pendingPoints += Object(_constants_js__WEBPACK_IMPORTED_MODULE_3__[\"CalculatePushdownPoints\"])(\n      m_inputManager.getCellsSoftDropped()\n    );\n\n    // Get the ARE based on piece lock height\n    /* ARE (frame delay before next piece) is 10 frames for 0-2 height, then an additional \n      2 frames for each group of 4 above that.\n        E.g. 9 high would be: 10 + 2 + 2 = 14 frames */\n    m_ARE = 10 + Math.floor((lockHeight + 2) / 4) * 2;\n\n    return false; // Return false because the piece didn't shift down\n  } else {\n    // Move down as usual\n    m_canvas.unDrawCurrentPiece();\n    m_currentPiece.moveDown();\n    m_canvas.drawCurrentPiece();\n    return true; // Return true because the piece moved down\n  }\n}\n\nfunction rotatePieceLeft() {\n  m_canvas.unDrawCurrentPiece();\n  m_currentPiece.rotate(false);\n  m_canvas.drawCurrentPiece();\n}\n\nfunction rotatePieceRight() {\n  m_canvas.unDrawCurrentPiece();\n  m_currentPiece.rotate(true);\n  m_canvas.drawCurrentPiece();\n}\n\nfunction togglePause() {\n  if (\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING ||\n    m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].FIRST_PIECE\n  ) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED;\n    refreshHeaderText();\n  } else if (m_gameState == _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].PAUSED) {\n    m_gameState = _constants_js__WEBPACK_IMPORTED_MODULE_3__[\"GameState\"].RUNNING;\n    refreshHeaderText();\n  }\n}\n\nfunction getGameState() {\n  return m_gameState;\n}\n\nfunction getARE() {\n  return m_ARE;\n}\n\n/**\n * SCRIPT START\n */\nm_inputManager = new _input_manager_js__WEBPACK_IMPORTED_MODULE_5__[\"InputManager\"](\n  moveCurrentPieceDown,\n  movePieceLeft,\n  movePieceRight,\n  rotatePieceLeft,\n  rotatePieceRight,\n  togglePause,\n  getGameState,\n  getARE\n);\n\nmainCanvas.addEventListener(\"mousedown\", function (e) {\n  m_boardEditManager.onMouseDown(e);\n});\nmainCanvas.addEventListener(\"mousemove\", function (e) {\n  m_boardEditManager.onMouseDrag(e);\n});\nmainCanvas.addEventListener(\"mouseup\", function (e) {\n  m_boardEditManager.onMouseUp(e);\n});\nrightPanel.addEventListener(\"mouseleave\", function (e) {\n  m_boardEditManager.onMouseUp(e);\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  m_inputManager.keyDownListener(e);\n});\ndocument.addEventListener(\"keyup\", (e) => {\n  m_inputManager.keyUpListener(e);\n});\n\ngameOptionsForm.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  mainCanvas.focus();\n\n  m_boardGenerator.loadEmptyBoard(m_board);\n  m_canvas.drawBoard();\n  startGame();\n});\ndocument.getElementById(\"random-board\").addEventListener(\"click\", (e) => {\n  m_boardGenerator.loadStandardBoard(m_board);\n  m_canvas.drawBoard();\n  startGame();\n});\ndocument.getElementById(\"dig-practice\").addEventListener(\"click\", (e) => {\n  m_boardGenerator.loadDigBoard();\n  m_canvas.drawBoard();\n  startGame();\n});\n\nresetLocalVariables();\nm_canvas.drawBoard();\nm_canvas.drawNextBox(null);\nrefreshHeaderText();\nrefreshStats();\nrefreshScoreHUD();\ngameLoop();\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/input_manager.js":
/*!******************************!*\
  !*** ./src/input_manager.js ***!
  \******************************/
/*! exports provided: InputManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InputManager\", function() { return InputManager; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n\nconst GameSettings = __webpack_require__(/*! ./game_settings_manager */ \"./src/game_settings_manager.js\");\n\nconst debugTextElement = document.getElementById(\"debug\");\n\n// Default control setup\nlet LEFT_KEYCODE = 37;\nlet RIGHT_KEYCODE = 39;\nlet ROTATE_LEFT_KEYCODE = 90;\nlet ROTATE_RIGHT_KEYCODE = 88;\nlet DOWN_KEYCODE = 40;\n\nfunction InputManager(\n  moveDownFunc,\n  moveLeftFunc,\n  moveRightFunc,\n  rotateLeftFunc,\n  rotateRightFunc,\n  togglePauseFunc,\n  getGameStateFunc,\n  getAREFunc\n) {\n  this.resetLocalVariables();\n\n  this.togglePauseFunc = togglePauseFunc;\n  this.moveDownFunc = moveDownFunc;\n  this.moveLeftFunc = moveLeftFunc;\n  this.moveRightFunc = moveRightFunc;\n  this.rotateLeftFunc = rotateLeftFunc;\n  this.rotateRightFunc = rotateRightFunc;\n  this.getGameStateFunc = getGameStateFunc;\n  this.getAREFunc = getAREFunc;\n}\n\n/* ---------------------\n    Called by parent\n---------------------- */\n\nInputManager.prototype.getIsSoftDropping = function () {\n  return this.isSoftDropping;\n};\n\nInputManager.prototype.getCellsSoftDropped = function () {\n  return this.cellSoftDropped;\n};\n\nInputManager.prototype.onPieceLock = function () {\n  if (GameSettings.IsDASAlwaysCharged()) {\n    this.setDASCharge(GameSettings.GetDASTriggerThreshold());\n  }\n};\n\nInputManager.prototype.resetLocalVariables = function () {\n  this.leftHeld = false;\n  this.rightHeld = false;\n  this.downHeld = false;\n  this.isSoftDropping = false;\n  this.cellSoftDropped = 0;\n  this.dasCharge = GameSettings.GetDASTriggerThreshold(); // Starts charged on the first piece\n  this.softDroppedLastFrame = false;\n};\n\nInputManager.prototype.handleInputsThisFrame = function () {\n  // If holding multiple keys, do nothing\n  const dpadDirectionsHeld = this.downHeld + this.leftHeld + this.rightHeld;\n  if (dpadDirectionsHeld > 1) {\n    this.isSoftDropping = false;\n    this.cellSoftDropped = 0;\n    return;\n  }\n\n  // Move piece down\n  if (this.isSoftDropping && !this.softDroppedLastFrame) {\n    const didMove = this.moveDownFunc();\n    if (didMove) {\n      this.cellSoftDropped += 1;\n    } else {\n      // If it didn't move, then it locked in. Reset soft drop between pieces.\n      this.isSoftDropping = false;\n      this.cellSoftDropped = 0;\n    }\n    this.softDroppedLastFrame = true;\n    return;\n  } else {\n    this.softDroppedLastFrame = false;\n  }\n\n  // DAS left\n  if (this.leftHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].LEFT);\n    return;\n  }\n\n  // DAS right\n  if (this.rightHeld) {\n    this.handleHeldDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].RIGHT);\n  }\n};\n\n/* ---------------------\n    Key listeners \n---------------------- */\n\nInputManager.prototype.keyDownListener = function (event) {\n  // Override the browser's built-in key repeating\n  if (event.repeat) {\n    return;\n  }\n\n  // Track whether keys are held regardless of state\n  switch (event.keyCode) {\n    case LEFT_KEYCODE:\n      this.leftHeld = true;\n      break;\n    case RIGHT_KEYCODE:\n      this.rightHeld = true;\n      break;\n    case DOWN_KEYCODE:\n      this.downHeld = true;\n      break;\n  }\n\n  // Only actually move the pieces if in the proper game state\n  if (shouldPerformPieceMovements(this.getGameStateFunc())) {\n    switch (event.keyCode) {\n      case LEFT_KEYCODE:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].LEFT);\n        break;\n      case RIGHT_KEYCODE:\n        this.handleTappedDirection(_constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].RIGHT);\n        break;\n      case ROTATE_LEFT_KEYCODE:\n        this.rotateLeftFunc();\n        break;\n      case ROTATE_RIGHT_KEYCODE:\n        this.rotateRightFunc();\n        break;\n      case DOWN_KEYCODE:\n        this.isSoftDropping = true;\n        break;\n    }\n  } else {\n    switch (event.keyCode) {\n      case ROTATE_LEFT_KEYCODE:\n        console.log(\"rotate rejected, state: \", this.getGameStateFunc());\n        break;\n      case ROTATE_RIGHT_KEYCODE:\n        console.log(\"rotate rejected, state: \", this.getGameStateFunc());\n        break;\n    }\n  }\n\n  // Client controls\n  if (event.keyCode == 80) {\n    // Letter 'P' pauses and unpauses\n    this.togglePauseFunc();\n  }\n};\n\nInputManager.prototype.keyUpListener = function (event) {\n  // Track whether keys are held regardless of state\n  if (event.keyCode == LEFT_KEYCODE) {\n    this.leftHeld = false;\n  } else if (event.keyCode == RIGHT_KEYCODE) {\n    this.rightHeld = false;\n  } else if (event.keyCode == DOWN_KEYCODE) {\n    this.downHeld = false;\n    this.isSoftDropping = false; // Can stop soft dropping in any state\n    this.cellSoftDropped = 0;\n  }\n};\n\n/* ---------------------\n    Private helpers\n---------------------- */\n\nInputManager.prototype.tryShiftPiece = function (direction) {\n  // Try to move the piece and store whether it actually did or not\n  const didMove =\n    direction == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"Direction\"].LEFT ? this.moveLeftFunc() : this.moveRightFunc();\n  // Wall charge if it didn't move\n  if (!didMove) {\n    this.setDASCharge(GameSettings.GetDASTriggerThreshold());\n  }\n  return didMove;\n};\n\nInputManager.prototype.handleHeldDirection = function (direction) {\n  const DASTriggerThreshold = GameSettings.GetDASTriggerThreshold();\n  // Increment DAS\n  this.setDASCharge(Math.min(DASTriggerThreshold, this.dasCharge + 1));\n\n  // Attempt to shift the piece once it hits the trigger\n  if (this.dasCharge == DASTriggerThreshold) {\n    const didMove = this.tryShiftPiece(direction);\n    if (didMove) {\n      // Move DAS to charged floor for another cycle of ARR\n      this.setDASCharge(GameSettings.GetDASChargedFloor());\n    }\n  }\n};\n\n// Handle single taps of the dpad, if in the proper state\nInputManager.prototype.handleTappedDirection = function (direction) {\n  if (shouldPerformPieceMovements(this.getGameStateFunc())) {\n    // DAS loses charges on tap\n    this.setDASCharge(GameSettings.GetDASUnchargedFloor());\n    this.tryShiftPiece(direction);\n  }\n};\n\n// Updates the DAS charge and refreshes the debug text\nInputManager.prototype.setDASCharge = function (value) {\n  this.dasCharge = value;\n  this.refreshDebugText();\n};\n\nInputManager.prototype.refreshDebugText = function () {\n  let debugStr = \"\";\n  let dasVisualized = \"\";\n  for (let i = 0; i < this.dasCharge; i++) {\n    dasVisualized += \"x\";\n  }\n  // Have something on the second line so it's always the same height\n  if (this.dasCharge == 0) {\n    dasVisualized = \".\";\n  }\n  debugStr += \"DAS: \" + this.dasCharge + \"\\n\" + dasVisualized;\n  debugTextElement.innerText = debugStr;\n};\n\n// Checks if the game state allows for piece movements\nfunction shouldPerformPieceMovements(gameState) {\n  return gameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"GameState\"].RUNNING || gameState == _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"GameState\"].FIRST_PIECE;\n}\n\n\n//# sourceURL=webpack:///./src/input_manager.js?");

/***/ }),

/***/ "./src/piece.js":
/*!**********************!*\
  !*** ./src/piece.js ***!
  \**********************/
/*! exports provided: Piece */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Piece\", function() { return Piece; });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ \"./src/index.js\");\n\n\n\n/**\n * Piece object, responsible for moving and rotating itself within the board.\n * @param {[\n *    rotationList: list<4x4 matrix>,\n *    colorId: number,\n *    id: string (piece letter names)\n * ]} pieceData\n * @param {int[][]} board\n */\nfunction Piece(pieceData, board) {\n  this.rotationList = pieceData[0]; // All of the available rotations\n  this.colorId = pieceData[1];\n  this.id = pieceData[2];\n  this.board = board;\n\n  this.rotationIndex = 0; // Start from the first rotation\n  this.activeTetromino = this.rotationList[this.rotationIndex];\n\n  this.x = 3;\n  this.y = this.id == \"I\" ? -2 : -1; // The I piece spawns higher than the others\n}\n\nPiece.prototype.equals = function (otherPiece) {\n  return this.id === otherPiece.id;\n};\n\n// Get the height of the lowest row that the piece occupies\nPiece.prototype.getHeightFromBottom = function () {\n  let maxY = 0;\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // If the square is occupied by the piece, update the max\n      if (this.activeTetromino[r][c]) {\n        maxY = Math.max(maxY, this.y + r);\n      }\n    }\n  }\n  return _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] - maxY;\n};\n\nPiece.prototype.shouldLock = function () {\n  return this.collision(0, 1, this.activeTetromino);\n};\n\n// move Down the piece\nPiece.prototype.moveDown = function () {\n  this.y++;\n};\n\n/**\n * Attempt to move the piece right.\n * @returns true if the piece moved */\nPiece.prototype.moveRight = function () {\n  if (this.collision(1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x++;\n    return true;\n  }\n};\n\n/**\n * Attempt to move the piece left.\n * @returns true if the piece moved */\nPiece.prototype.moveLeft = function () {\n  if (this.collision(-1, 0, this.activeTetromino)) {\n    return false;\n  } else {\n    // No collision, move the piece\n    this.x--;\n    return true;\n  }\n};\n\n// rotate the piece\nPiece.prototype.rotate = function (isClockwise) {\n  const offset = isClockwise ? 1 : -1;\n  const nextIndex =\n    (this.rotationIndex + offset + this.rotationList.length) %\n    this.rotationList.length;\n  const nextPattern = this.rotationList[nextIndex];\n\n  // Rotate as long as the new orientation doesn't collide with the board\n  if (!this.collision(0, 0, nextPattern)) {\n    this.rotationIndex = nextIndex;\n    this.activeTetromino = this.rotationList[this.rotationIndex];\n  }\n};\n\n// Lock the piece in place\nPiece.prototype.lock = function () {\n  for (let r = 0; r < this.activeTetromino.length; r++) {\n    for (let c = 0; c < this.activeTetromino[r].length; c++) {\n      // we skip the vacant squares\n      if (!this.activeTetromino[r][c]) {\n        continue;\n      }\n\n      // we lock the piece\n      const newY = this.y + r;\n      const newX = this.x + c;\n      if (newY >= 0 && newY < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"] && newX >= 0 && newX < _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"]) {\n        this.board[this.y + r][this.x + c] = this.colorId;\n      }\n    }\n  }\n};\n\n// Collision fucntion\nPiece.prototype.collision = function (x, y, piece) {\n  for (let r = 0; r < piece.length; r++) {\n    for (let c = 0; c < piece[r].length; c++) {\n      // if the square is empty, we skip it\n      if (!piece[r][c]) {\n        continue;\n      }\n      // coordinates of the piece after movement\n      let newX = this.x + c + x;\n      let newY = this.y + r + y;\n\n      // conditions\n      if (newX < 0 || newX >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_COLUMN\"] || newY >= _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"NUM_ROW\"]) {\n        return true;\n      }\n      // skip newY < 0; board[-1] will crush our game\n      if (newY < 0) {\n        continue;\n      }\n      // check if there is a locked piece alrady in place\n      if (this.board[newY][newX] != 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n//# sourceURL=webpack:///./src/piece.js?");

/***/ }),

/***/ "./src/piece_selector.js":
/*!*******************************!*\
  !*** ./src/piece_selector.js ***!
  \*******************************/
/*! exports provided: PieceSelector */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PieceSelector\", function() { return PieceSelector; });\n/* harmony import */ var _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tetrominoes.js */ \"./src/tetrominoes.js\");\nconst pieceListElement = document.getElementById(\"piece-sequence\");\n\n\n\nlet m_pieceSequenceStr = \"\";\nlet m_readIndex = 0;\nlet m_isReadingFromSequence = false;\n\nfunction PieceSelector() {}\n\n/**\n  Public functions\n  */\n\nPieceSelector.prototype.startReadingPieceSequence = function () {\n  // Get piece sequence (with spaces trimmed)\n  m_pieceSequenceStr = pieceListElement.value.replace(/ /g, \"\");\n\n  if (m_pieceSequenceStr.length > 0) {\n    m_isReadingFromSequence = true;\n    m_readIndex = 0;\n  }\n};\n\n// Get the next piece, whether that be specified or random\nPieceSelector.prototype.chooseNextPiece = function (currentPieceId) {\n  // If there is a next specified piece, select that\n  if (m_isReadingFromSequence) {\n    return this.getPresetPiece();\n  }\n  // Otherwise pick one randomly\n  m_isReadingFromSequence = false;\n  return this.getRandomPiece(currentPieceId);\n};\n\n/**\n * Get summary of piece status (e.g. \"Random piece\" or e.g. \"Piece 5 of 13\"),\n * split over two lines.\n */\nPieceSelector.prototype.getStatusDisplay = function () {\n  if (m_isReadingFromSequence) {\n    return [\"Piece \", m_readIndex + 1 + \"/\" + m_pieceSequenceStr.length];\n  }\n  return [\"Random\", \"Piece\"];\n};\n\n/**\n  \"Private\" functions - unused outside of this file\n  */\n\nPieceSelector.prototype.getPresetPiece = function () {\n  const nextPieceId = m_pieceSequenceStr[m_readIndex];\n  const nextPieceData = _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LOOKUP\"][nextPieceId];\n  m_readIndex += 1;\n\n  // Check if we've reached the end of the sequence\n  if (m_readIndex >= m_pieceSequenceStr.length) {\n    m_isReadingFromSequence = false;\n    m_readIndex = 0;\n  }\n\n  return nextPieceData;\n};\n\n// Get a random piece, following the original RNG of NES tetris\nPieceSelector.prototype.getRandomPiece = function (previousPieceId) {\n  // Roll once 0-7, where 7 is a dummy value\n  let r = Math.floor(Math.random() * (_tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length + 1));\n  if (r == _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length || previousPieceId === _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"][r][2]) {\n    // Reroll once for repeats (or dummy) to reduce repeated pieces\n    r = Math.floor(Math.random() * _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"].length);\n  }\n  const nextPieceData = _tetrominoes_js__WEBPACK_IMPORTED_MODULE_0__[\"PIECE_LIST\"][r];\n  return nextPieceData;\n};\n\n\n//# sourceURL=webpack:///./src/piece_selector.js?");

/***/ }),

/***/ "./src/tetrominoes.js":
/*!****************************!*\
  !*** ./src/tetrominoes.js ***!
  \****************************/
/*! exports provided: PIECE_LOOKUP, PIECE_LIST */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PIECE_LOOKUP\", function() { return PIECE_LOOKUP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PIECE_LIST\", function() { return PIECE_LIST; });\nconst PIECE_I = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_J = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 1],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 1, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_L = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 1, 0, 0],\n  ],\n\n  [\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n  ],\n];\n\nconst PIECE_O = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 0],\n  ],\n];\n\nconst PIECE_S = [\n  [\n    [0, 0, 0, 0],\n    [0, 0, 1, 1],\n    [0, 1, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 0, 1],\n  ],\n];\n\nconst PIECE_T = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 1],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n  ],\n\n  [\n    [0, 0, 1, 0],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\nconst PIECE_Z = [\n  [\n    [0, 0, 0, 0],\n    [0, 1, 1, 0],\n    [0, 0, 1, 1],\n  ],\n\n  [\n    [0, 0, 0, 1],\n    [0, 0, 1, 1],\n    [0, 0, 1, 0],\n  ],\n];\n\n// The piece list, with colors and letter identifiers\n\n// [Definition, Color Set, Corresponding Letter]\nconst PIECE_LOOKUP = {\n  Z: [PIECE_Z, 2, \"Z\"],\n  S: [PIECE_S, 3, \"S\"],\n  T: [PIECE_T, 1, \"T\"],\n  O: [PIECE_O, 1, \"O\"],\n  L: [PIECE_L, 2, \"L\"],\n  I: [PIECE_I, 1, \"I\"],\n  J: [PIECE_J, 3, \"J\"],\n};\n\nconst PIECE_LIST = Object.values(PIECE_LOOKUP);\n\n\n//# sourceURL=webpack:///./src/tetrominoes.js?");

/***/ }),

/***/ "./src/ui_manager.js":
/*!***************************!*\
  !*** ./src/ui_manager.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"./src/constants.js\");\n/**\n * Handle UI animations that are indepedent of the main tetris game\n */\n\n\n// Get elements\nconst mainCanvas = document.getElementById(\"main-canvas\");\nconst leftPanelOpenToggle = document.getElementById(\"left-panel-toggle-open\");\nconst leftPanel = document.getElementById(\"left-panel\");\nconst rightPanel = document.getElementById(\"right-panel\");\nlet leftPanelIsOpen = true;\n\nleftPanel.style.minHeight = _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_HEIGHT\"] + 60;\n\n// Resize the canvas based on the square size\nmainCanvas.setAttribute(\"height\", _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"BOARD_HEIGHT\"]);\nmainCanvas.setAttribute(\"width\", _constants_js__WEBPACK_IMPORTED_MODULE_0__[\"DISPLAY_FULL_WIDTH\"]);\n\nleftPanelOpenToggle.addEventListener(\"click\", function (e) {\n  leftPanelIsOpen = !leftPanelIsOpen;\n\n  if (leftPanelIsOpen) {\n    leftPanel.style.marginLeft = 0;\n    leftPanelOpenToggle.innerText = \"<\";\n  } else {\n    leftPanel.style.marginLeft = -280;\n    leftPanelOpenToggle.innerText = \">\";\n  }\n});\n\n\n//# sourceURL=webpack:///./src/ui_manager.js?");

/***/ })

/******/ });